// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"time"

	v1alpha1 "github.com/gardener/gardener/pkg/apis/extensions/v1alpha1"
	scheme "github.com/gardener/gardener/pkg/client/extensions/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// WorkersGetter has a method to return a WorkerInterface.
// A group's client should implement this interface.
type WorkersGetter interface {
	Workers(namespace string) WorkerInterface
}

// WorkerInterface has methods to work with Worker resources.
type WorkerInterface interface {
	Create(*v1alpha1.Worker) (*v1alpha1.Worker, error)
	Update(*v1alpha1.Worker) (*v1alpha1.Worker, error)
	UpdateStatus(*v1alpha1.Worker) (*v1alpha1.Worker, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.Worker, error)
	List(opts v1.ListOptions) (*v1alpha1.WorkerList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Worker, err error)
	WorkerExpansion
}

// workers implements WorkerInterface
type workers struct {
	client rest.Interface
	ns     string
}

// newWorkers returns a Workers
func newWorkers(c *ExtensionsV1alpha1Client, namespace string) *workers {
	return &workers{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the worker, and returns the corresponding worker object, and an error if there is any.
func (c *workers) Get(name string, options v1.GetOptions) (result *v1alpha1.Worker, err error) {
	result = &v1alpha1.Worker{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("workers").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Workers that match those selectors.
func (c *workers) List(opts v1.ListOptions) (result *v1alpha1.WorkerList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.WorkerList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("workers").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested workers.
func (c *workers) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("workers").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a worker and creates it.  Returns the server's representation of the worker, and an error, if there is any.
func (c *workers) Create(worker *v1alpha1.Worker) (result *v1alpha1.Worker, err error) {
	result = &v1alpha1.Worker{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("workers").
		Body(worker).
		Do().
		Into(result)
	return
}

// Update takes the representation of a worker and updates it. Returns the server's representation of the worker, and an error, if there is any.
func (c *workers) Update(worker *v1alpha1.Worker) (result *v1alpha1.Worker, err error) {
	result = &v1alpha1.Worker{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("workers").
		Name(worker.Name).
		Body(worker).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *workers) UpdateStatus(worker *v1alpha1.Worker) (result *v1alpha1.Worker, err error) {
	result = &v1alpha1.Worker{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("workers").
		Name(worker.Name).
		SubResource("status").
		Body(worker).
		Do().
		Into(result)
	return
}

// Delete takes name of the worker and deletes it. Returns an error if one occurs.
func (c *workers) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("workers").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *workers) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("workers").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched worker.
func (c *workers) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Worker, err error) {
	result = &v1alpha1.Worker{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("workers").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
